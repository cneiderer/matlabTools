function combline_filter_design_v1(varargin)

%
% combline_filter_design_v1.m
%
% Description:
%   Creates a combline filter topology based on the procedure described in 
%   figure 8.13 from Matthaei,Young, and Jones.
%
% Inputs:
%   passband_ripple         ->
%   center_freq             ->
%   lo_corner_freq          ->
%   hi_corner_freq          ->
%   desired_attenuation     ->
%   lo_atten_freq           ->
%   hi_atten_freq           ->
%
%   line_admittance         ->
%   res_electrical_length   ->
%   norm_line_admittances   ->
%   ground_plane_spacing    ->
%   resonator_thickness     ->
%
% Outputs:
%
%
% Author:
%   Curtis Neiderer,
%
% Notes / Changes:
%

%%
if nargin==12
    % Inputs used to determine filter order
    passband_ripple=varargin{1};
    center_freq=varargin{2};
    lo_corner_freq=varargin{3};
    hi_corner_freq=varargin{4};
    desired_attenuation=varargin{5};
    lo_atten_freq=varargin{6};
    hi_atten_freq=varargin{7};
    
    % Inputs for combline structure
    term_line_admittance=varargin{8};
    res_electrical_length=varargin{9};
    norm_line_admittances=varargin{10};
    ground_plane_spacing=varargin{11};
    resonator_thickness=varargin{12}
else
    % Inputs used to determine filter order
    passband_ripple=input('Please enter the passband ripple [dB]: ');
    center_freq=input('Please enter the center frequency [GHz]: ');
    lo_corner_freq=input('Enter the low edge of the passband [GHz]: ');
    hi_corner_freq=input('Enter the high edge of the passband [GHz]: ');
    lo_attenuation_freq=...
        input('Enter the low attenuation frequency [GHz]: ');
    hi_attenuation_freq=...
        input('Enter the high attenuation frequency [GHz]: ');
    desired_attenuation=input('Enter the desired attenuation [dB]: ');
    
    % Inputs for combline structure
    term_line_admittance=
        input('Choose the terminating line admittance [Siemens]: ');
    res_electrical_length=
        input('Choose the resonator electrical length [rad]: ');
    norm_line_admittances=
        input(['Choose the normalized line admittances so as to give ',...
        'optimum unloaded Q''s: ']);
    ground_plane_spacing=input('Choose the ground plane spacing [in]: ');
    resonator_thickness=input('Choose the resonator thickness [in]: ');     
end


%% ---------- %% Find filter order %% ---------- %%
%% Calculate the guide wavelengths
lo_corner_guideLambda=...
    guide_wavelength_calc(lo_corner_freq,ground_plane_spacing);
hi_corner_guideLambda=...
    guide_wavelength_calc(hi_corner_freq,ground_plane_spacing);
center_freq_guideLambda=(lo_corner_guideLambda+hi_corner_guideLambda)/2;
lo_attenuation_guideLambda=...
    guide_wavelength_calc(lo_attenuation_freq,ground_plane_spacing);
hi_attenuation_guideLambda=...
    guide_wavelength_calc(hi_attenuation_freq,ground_plane_spacing);

%% Calculate guide wavelength fractional bandwidth and fractional bandwidth
bandwidth_guideLambda=(lo_corner_guideLambda-hi_corner_guideLambda)/...
    center_freq_guideLambda;
bandwidth=(hi_corner_freq-lo_corner_freq)/center_freq;

%% Calculate attenuation frequency ratios
lo_attenuation_freq_ratio=abs((2/bandwidth_guideLambda)*...
    ((center_freq_guideLambda-lo_attenuation_guideLambda)/...
    center_freq_guideLambda));
hi_attenuation_freq_ratio=abs((2/bandwidth_guideLambda)*...
    ((center_freq_guideLambda-hi_attenuation_guideLambda)/...
    center_freq_guideLambda));

%% Calculate epsilon
epsilon=(10^(passband_ripple/10))-1;

%% Calculate filter order
lo_filter_order=...
    ceil(real(solve([num2str(desired_attenuation),'=10*log10(1+(',...
    num2str(epsilon),'*(cosh(order*acosh(',...
    num2str(lo_attenuation_freq_ratio),')))^2))'],'order')));
lo_filter_order=double(lo_filter_order(1));
hi_filter_order=...
    ceil(real(solve([num2str(desired_attenuation),'=10*log10(1+(',...
    num2str(epsilon),'*(cos(order*acos(',...
    num2str(hi_attenuation_freq_ratio),')))^2))'],'order')));
hi_filter_order=double(hi_filter_order(1));

filter_order=max([lo_filter_order,hi_filter_order]);

% Double-check attenuation based on filter_order calculation
actual_lo_attenuation=10*log10(1+epsilon*...
    (cosh(filter_order*acosh(lo_attenuation_freq_ratio)))^2);
actual_hi_attenuation=10*log10(1+epsilon*...
    (cos(filter_order*acos(hi_attenuation_freq_ratio)))^2);

%% Calculate the g values
beta=log(coth(passband_ripple/17.37));
gamma=sinh(beta/(2*filter_order));

g0=1;
filter_g_values.g0=g0;
g_values=g0;
for k=1:filter_order

    eval(['a',num2str(k),'=sin((((2*k)-1)*pi)/(2*filter_order));']);
    eval(['b',num2str(k),'=gamma^2+(sin((k*pi)/filter_order))^2;']);

    %
    if k==1
        g1=(2*a1)/gamma;
        filter_g_values.g1=g1;
        g_values=[g_values,g1];
    else
        eval(['g',num2str(k),'=(4*a',num2str(k-1),'*a',num2str(k),')/(b',...
            num2str(k-1),'*g',num2str(k-1),');']);
        eval(['filter_g_values.g',num2str(k),'=g',num2str(k),';']);
        eval(['g_values=[g_values,g',num2str(k),'];']);
    end

    if k==filter_order
        test_even_odd=mod(filter_order,2);
        if test_even_odd==0
            eval(['g',num2str(k+1),'=(coth(beta/4))^2;']);
        else
            eval(['g',num2str(k+1),'=1;']);
        end
        eval(['filter_g_values.g',num2str(k+1),'=g',num2str(k+1),';']);
        eval(['g_values=[g_values,g',num2str(k+1),'];']);
    end

end


%% ---------- %% Calculate Combline Topology %% ---------- %%
%% Calculate normalized susceptances


%% Calculate normalized J-inverters


%% Calculate normalized capacitances 
%% (per unit length between each line and ground)


%% Calculate normalized mutual capacitances
%% (per unit length between adjacent lines)


%% Calculate the lumped capacitances


%% Calculate resonator widths


%% Calculate resonator spacing


%% Calculate capacitor plate dimensions
cap_plate_thickness=.025;
cap_plate_width=0.75*ground_plane_spacing;
cap_plate_length=max(resonator_width)*1.05;

